const API_URL = "https://mkntw-github-io.onrender.com"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
let currentUserId = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const loginBtn = document.getElementById('loginBtn');
const registerBtn = document.getElementById('registerBtn');
const logoutBtn = document.getElementById('logoutBtn');
const userInfo = document.getElementById('userInfo');
const userIdSpan = document.getElementById('userId');
const balanceSpan = document.getElementById('balance');
const transferBtn = document.getElementById('transferBtn');
const mineBtn = document.getElementById('mineBtn'); // –ö–Ω–æ–ø–∫–∞ MINE
const historyBtn = document.getElementById('historyBtn'); // –ö–Ω–æ–ø–∫–∞ –û–ø–µ—Ä–∞—Ü–∏–∏

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
const registerModal = document.getElementById('registerModal');
const loginModal = document.getElementById('loginModal');
const transferModal = document.getElementById('transferModal');
const historyModal = document.getElementById('historyModal'); // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏
const transactionList = document.getElementById('transactionList'); // –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const closeHistoryBtn = document.getElementById('closeHistoryBtn'); // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏—Å—Ç–æ—Ä–∏–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    const savedUserId = localStorage.getItem('userId');
    if (savedUserId) {
        currentUserId = savedUserId;
        updateUI();
        fetchUserData();
    } else {
        updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    loginBtn.addEventListener('click', () => {
        closeModals(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        loginModal.classList.remove('hidden'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
    });
    registerBtn.addEventListener('click', () => {
        closeModals(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        registerModal.classList.remove('hidden'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    });
    logoutBtn.addEventListener('click', logout);
    transferBtn.addEventListener('click', () => {
        closeModals(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        transferModal.classList.remove('hidden'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    });
    historyBtn.addEventListener('click', openHistoryModal); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    closeHistoryBtn.addEventListener('click', closeHistoryModal); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏

    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ MINE
    mineBtn.addEventListener('click', async () => {
        if (!currentUserId) return;

        try {
            const response = await fetch(`${API_URL}/update`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: currentUserId })
            });

            if (!response.ok) {
                throw new Error(`Server responded with status ${response.status}`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            fetchUserData();
        } catch (error) {
            console.error(error);
            alert('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±—ã—Ç—å –º–æ–Ω–µ—Ç—ã');
        }
    });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    if (currentUserId) {
        loginBtn.classList.add('hidden');
        registerBtn.classList.add('hidden');
        logoutBtn.classList.remove('hidden');
        userInfo.classList.remove('hidden');
        transferBtn.classList.remove('hidden');
        mineBtn.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É MINE
        historyBtn.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –û–ø–µ—Ä–∞—Ü–∏–∏
    } else {
        loginBtn.classList.remove('hidden');
        registerBtn.classList.remove('hidden');
        logoutBtn.classList.add('hidden');
        userInfo.classList.add('hidden');
        transferBtn.classList.add('hidden');
        mineBtn.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É MINE
        historyBtn.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –û–ø–µ—Ä–∞—Ü–∏–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatBalance(balance) {
    return balance.toLocaleString('en-US'); // –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,000,000)
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async function register() {
    const login = document.getElementById('regLogin').value;
    const password = document.getElementById('regPassword').value;

    try {
        const response = await fetch(`${API_URL}/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username: login, password })
        });

        const data = await response.json();

        if (data.success) {
            alert(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –í–∞—à ID: ${data.userId}`);
            closeModals();
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${data.error}`);
        }
    } catch (error) {
        console.error(error);
        alert('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async function login() {
    const login = document.getElementById('loginInput').value;
    const password = document.getElementById('passwordInput').value;

    try {
        const response = await fetch(`${API_URL}/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username: login, password })
        });

        const data = await response.json();

        if (data.success) {
            currentUserId = data.userId;
            localStorage.setItem('userId', currentUserId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ localStorage
            updateUI();
            closeModals();
            fetchUserData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${data.error}`);
        }
    } catch (error) {
        console.error(error);
        alert('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –í—ã—Ö–æ–¥
function logout() {
    localStorage.removeItem('userId');
    currentUserId = null;
    updateUI();
    closeModals();
}

// –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç
async function transferCoins() {
    const toUserId = document.getElementById('toUserId').value;
    const amount = parseInt(document.getElementById('transferAmount').value, 10);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if (!toUserId || !amount || amount <= 0) {
        alert('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return;
    }

    // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ
    if (toUserId === currentUserId) {
        alert('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ');
        return;
    }

    try {
        const response = await fetch(`${API_URL}/transfer`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ fromUserId: currentUserId, toUserId, amount })
        });

        const data = await response.json();

        if (data.success) {
            alert(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${formatBalance(data.fromBalance)}`);
            closeModals();
            fetchUserData();
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${data.error}`);
        }
    } catch (error) {
        console.error(error);
        alert('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function fetchUserData() {
    try {
        const response = await fetch(`${API_URL}/user?userId=${currentUserId}`);
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }

        const data = await response.json();

        if (data.success && data.user) {
            const balance = data.user.balance || 0; // –ë–∞–ª–∞–Ω—Å –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ balance —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            if (typeof balance === 'number') {
                userIdSpan.textContent = currentUserId;
                balanceSpan.textContent = formatBalance(balance); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            } else {
                console.error('[Fetch User Data] Error: Balance is not a number');
                balanceSpan.textContent = '0'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
        } else {
            console.error('[Fetch User Data] Error: Invalid response from server');
            balanceSpan.textContent = '0'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    } catch (error) {
        console.error('[Fetch User Data] Error:', error.message);
        balanceSpan.textContent = '0'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏
function openHistoryModal() {
    if (!currentUserId) return;

    fetchTransactionHistory();
    historyModal.classList.remove('hidden');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏
function closeHistoryModal() {
    historyModal.classList.add('hidden');
    transactionList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
async function fetchTransactionHistory() {
    try {
        const response = await fetch(`${API_URL}/transactions?userId=${currentUserId}`);
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }

        const data = await response.json();

        if (data.success && data.transactions) {
            displayTransactionHistory(data.transactions);
        } else {
            console.error('[Fetch Transactions] Error: Invalid response from server');
        }
    } catch (error) {
        console.error('[Fetch Transactions] Error:', error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
function displayTransactionHistory(transactions) {
    transactionList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

    if (transactions.length === 0) {
        transactionList.innerHTML = '<li>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</li>';
        return;
    }

    transactions.forEach(tx => {
        const li = document.createElement('li');
        const date = new Date(tx.created_at).toLocaleString(); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        const amount = formatBalance(tx.amount);

        if (tx.type === 'sent') {
            li.textContent = `–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${tx.to_user_id} (${date})`;
        } else {
            li.textContent = `–ü–æ–ª—É—á–µ–Ω–æ: ${amount} –º–æ–Ω–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${tx.from_user_id} (${date})`;
        }

        transactionList.appendChild(li);
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function closeModals() {
    registerModal.classList.add('hidden');
    loginModal.classList.add('hidden');
    transferModal.classList.add('hidden');
    historyModal.classList.add('hidden');
}
