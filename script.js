const API_URL = "https://mkntw-github-io.onrender.com"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
let currentUserId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    const savedUserId = localStorage.getItem('userId');
    if (savedUserId) {
        currentUserId = savedUserId;
        createUI();
        fetchUserData();
        updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    } else {
        openAuthModal(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function createUI() {
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    let userInfo = document.getElementById('userInfo');
    if (!userInfo) {
        userInfo = document.createElement('div');
        userInfo.id = 'userInfo';
        userInfo.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        userInfo.innerHTML = `
            <p id="userIdLabel"><strong>ID:</strong> <span id="userId">0</span></p>
            <p id="balanceLabel"><strong>–ë–∞–ª–∞–Ω—Å:</strong> <span id="balance">0</span></p>
        `;
        document.body.appendChild(userInfo);
    }

    // –ö–Ω–æ–ø–∫–∞ "–ú–∞–π–Ω–∏—Ç—å"
    let mineBtn = document.getElementById('mineBtn');
    if (!mineBtn) {
        mineBtn = document.createElement('img');
        mineBtn.id = 'mineBtn';
        mineBtn.src = '11.jpg';
        mineBtn.alt = '–ú–∞–π–Ω–∏—Ç—å';
        mineBtn.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        document.body.appendChild(mineBtn);
        mineBtn.addEventListener('click', mineCoins);
    }

    // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
    let bottomBar = document.getElementById('bottomBar');
    if (!bottomBar) {
        bottomBar = document.createElement('div');
        bottomBar.id = 'bottomBar';
        bottomBar.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        bottomBar.innerHTML = `
            <button id="transferBtn">–ü–µ—Ä–µ–≤–æ–¥</button>
            <div class="divider"></div>
            <button id="historyBtn">–ò—Å—Ç–æ—Ä–∏—è</button>
            <div class="divider"></div>
            <button id="logoutBtn">–í—ã—Ö–æ–¥</button>
        `;
        document.body.appendChild(bottomBar);

        // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('logoutBtn')?.addEventListener('click', logout);
        document.getElementById('transferBtn')?.addEventListener('click', openTransferModal);
        document.getElementById('historyBtn')?.addEventListener('click', openHistoryModal);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    const userInfo = document.getElementById('userInfo');
    const mineBtn = document.getElementById('mineBtn');
    const bottomBar = document.getElementById('bottomBar');

    if (currentUserId) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É
        if (userInfo) userInfo.classList.remove('hidden');
        if (mineBtn) mineBtn.classList.remove('hidden');
        if (bottomBar) {
            bottomBar.classList.remove('hidden');
            bottomBar.style.display = 'flex'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–Ω–µ–ª—å –≤–∏–¥–∏–º–∞
        }
        removeAuthModal(); // –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ DOM
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É
        if (userInfo) userInfo.classList.add('hidden');
        if (mineBtn) mineBtn.classList.add('hidden');
        if (bottomBar) {
            bottomBar.classList.add('hidden');
            bottomBar.style.display = 'none'; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        }
        openAuthModal(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function fetchUserData() {
    try {
        const response = await fetch(`${API_URL}/user?userId=${currentUserId}`);
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }

        const data = await response.json();

        if (data.success && data.user) {
            const balance = data.user.balance || 0; // –ë–∞–ª–∞–Ω—Å –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ balance —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            if (typeof balance === 'number') {
                document.getElementById('userId').textContent = currentUserId;
                document.getElementById('balance').textContent = formatBalance(balance); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            } else {
                console.error('[Fetch User Data] Error: Balance is not a number');
                document.getElementById('balance').textContent = '0'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
        } else {
            console.error('[Fetch User Data] Error: Invalid response from server');
            document.getElementById('balance').textContent = '0'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    } catch (error) {
        console.error('[Fetch User Data] Error:', error.message);
        document.getElementById('balance').textContent = '0'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatBalance(balance) {
    return balance.toLocaleString('en-US'); // –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,000,000)
}

// –î–æ–±—ã—á–∞ –º–æ–Ω–µ—Ç (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
async function mineCoins() {
    if (!currentUserId) return;

    try {
        const response = await fetch(`${API_URL}/update`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: currentUserId })
        });

        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        fetchUserData();
    } catch (error) {
        console.error(error);
    }
}

// –í—ã—Ö–æ–¥
function logout() {
    localStorage.removeItem('userId');
    currentUserId = null;

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const userInfo = document.getElementById('userInfo');
    const mineBtn = document.getElementById('mineBtn');
    const bottomBar = document.getElementById('bottomBar');

    if (userInfo) userInfo.classList.add('hidden');
    if (mineBtn) mineBtn.classList.add('hidden');
    if (bottomBar) bottomBar.classList.add('hidden');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateUI();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
function openTransferModal() {
    const modal = createModal('transferModal', `
        <h3>–ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç</h3>
        <label for="toUserIdInput">–ö–æ–º—É (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):</label>
        <input type="text" id="toUserIdInput" placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è">
        <label for="transferAmountInput">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
        <input type="number" id="transferAmountInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É">
        <button id="sendTransferBtn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        <button class="close-btn">X</button>
    `);

    const closeTransferBtn = modal.querySelector('.close-btn');
    const sendTransferBtn = modal.querySelector('#sendTransferBtn');

    if (closeTransferBtn) closeTransferBtn.addEventListener('click', () => closeModal('transferModal'));
    if (sendTransferBtn) sendTransferBtn.addEventListener('click', sendTransfer);

    openModal('transferModal');
}

// –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç
async function sendTransfer() {
    const toUserId = document.getElementById('toUserIdInput')?.value;
    const amount = parseInt(document.getElementById('transferAmountInput')?.value, 10);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if (!toUserId || !amount || amount <= 0) {
        alert('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return;
    }

    // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ
    if (toUserId === currentUserId) {
        alert('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ');
        return;
    }

    try {
        const response = await fetch(`${API_URL}/transfer`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ fromUserId: currentUserId, toUserId, amount })
        });

        const data = await response.json();

        if (data.success) {
            alert(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${formatBalance(data.fromBalance)}`);
            closeModal('transferModal');
            fetchUserData();
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${data.error}`);
        }
    } catch (error) {
        console.error(error);
        alert('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
function openTransferModal() {
    const modal = createModal('transferModal', `
        <h3>–ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç</h3>
        <label for="toUserIdInput">–ö–æ–º—É (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):</label>
        <input type="text" id="toUserIdInput" placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è">
        <label for="transferAmountInput">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
        <input type="number" id="transferAmountInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É">
        <button id="sendTransferBtn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        <button class="close-btn">X</button>
    `);

    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeTransferBtn = modal.querySelector('.close-btn');
    const sendTransferBtn = modal.querySelector('#sendTransferBtn');

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (closeTransferBtn) closeTransferBtn.addEventListener('click', () => closeModal('transferModal'));
    if (sendTransferBtn) sendTransferBtn.addEventListener('click', sendTransfer);

    openModal('transferModal');
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
function openHistoryModal() {
    const modal = createModal('historyModal', `
        <h3>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
        <div class="scrollable-content">
            <ul id="transactionList"></ul>
        </div>
        <button class="close-btn">X</button>
    `);

    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeHistoryBtn = modal.querySelector('.close-btn');

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    if (closeHistoryBtn) closeHistoryBtn.addEventListener('click', () => closeModal('historyModal'));

    fetchTransactionHistory();
    openModal('historyModal');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
async function fetchTransactionHistory() {
    try {
        const response = await fetch(`${API_URL}/transactions?userId=${currentUserId}`);
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }

        const data = await response.json();

        if (data.success && data.transactions) {
            displayTransactionHistory(data.transactions);
        } else {
            console.error('[Fetch Transactions] Error: Invalid response from server');
        }
    } catch (error) {
        console.error('[Fetch Transactions] Error:', error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
function displayTransactionHistory(transactions) {
    const transactionList = document.getElementById('transactionList');
    if (transactionList) transactionList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

    if (transactions.length === 0) {
        if (transactionList) transactionList.innerHTML = '<li>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</li>';
        return;
    }

    transactions.forEach(tx => {
        const li = document.createElement('li');
        const date = new Date(tx.created_at).toLocaleString(); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        const amount = formatBalance(tx.amount);

        if (tx.type === 'sent') {
            li.textContent = `–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${tx.to_user_id} (${date})`;
        } else {
            li.textContent = `–ü–æ–ª—É—á–µ–Ω–æ: ${amount} –º–æ–Ω–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${tx.from_user_id} (${date})`;
        }

        if (transactionList) transactionList.appendChild(li);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function createModal(id, content) {
    const modal = document.createElement('div');
    modal.id = id;
    modal.className = 'modal hidden'; // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    modal.innerHTML = `
        <div class="modal-content">
            ${content}
        </div>
    `;
    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—É—Å—Ç—É—é –æ–±–ª–∞—Å—Ç—å
    modal.addEventListener('click', (event) => {
        if (event.target === modal) closeModal(id);
    });

    return modal;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) modal.classList.remove('hidden');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) modal.classList.add('hidden');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑ DOM
function removeAuthModal() {
    const authModal = document.getElementById('authModal');
    if (authModal) authModal.remove(); // –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ –∏–∑ DOM
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function openAuthModal() {
    let authModal = document.getElementById('authModal');
    if (!authModal) {
        authModal = createModal('authModal', `
            <h3>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
            <div id="loginSection">
                <h4>–í—Ö–æ–¥</h4>
                <input type="text" id="loginInput" placeholder="–õ–æ–≥–∏–Ω">
                <input type="password" id="passwordInput" placeholder="–ü–∞—Ä–æ–ª—å">
                <button id="loginSubmitBtn">–í–æ–π—Ç–∏</button>
                <button id="switchToRegisterBtn">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
            </div>
            <div id="registerSection" style="display: none;">
                <h4>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h4>
                <input type="text" id="regLogin" placeholder="–õ–æ–≥–∏–Ω">
                <input type="password" id="regPassword" placeholder="–ü–∞—Ä–æ–ª—å">
                <button id="registerSubmitBtn">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
                <button id="switchToLoginBtn">–í–æ–π—Ç–∏</button>
            </div>
        `);

        const loginSubmitBtn = authModal.querySelector('#loginSubmitBtn');
        const registerSubmitBtn = authModal.querySelector('#registerSubmitBtn');
        const switchToRegisterBtn = authModal.querySelector('#switchToRegisterBtn');
        const switchToLoginBtn = authModal.querySelector('#switchToLoginBtn');

        if (loginSubmitBtn) loginSubmitBtn.addEventListener('click', login);
        if (registerSubmitBtn) registerSubmitBtn.addEventListener('click', register);
        if (switchToRegisterBtn) switchToRegisterBtn.addEventListener('click', openRegisterSection);
        if (switchToLoginBtn) switchToLoginBtn.addEventListener('click', openLoginSection);
    }
    openLoginSection(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –≤—Ö–æ–¥–∞
    openModal('authModal');
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ–∫—Ü–∏–∏ –≤—Ö–æ–¥–∞
function openLoginSection() {
    const loginSection = document.getElementById('loginSection');
    const registerSection = document.getElementById('registerSection');
    if (loginSection) loginSection.style.display = 'block';
    if (registerSection) registerSection.style.display = 'none';
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function openRegisterSection() {
    const loginSection = document.getElementById('loginSection');
    const registerSection = document.getElementById('registerSection');
    if (loginSection) loginSection.style.display = 'none';
    if (registerSection) registerSection.style.display = 'block';
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async function register() {
    const login = document.getElementById('regLogin')?.value;
    const password = document.getElementById('regPassword')?.value;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
    if (!login || !password) {
        alert('‚ùå –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
        return;
    }

    try {
        const response = await fetch(`${API_URL}/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username: login, password })
        });

        const data = await response.json();

        if (data.success) {
            alert(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –í–∞—à ID: ${data.userId}`);
            currentUserId = data.userId;
            localStorage.setItem('userId', currentUserId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ localStorage
            createUI(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            fetchUserData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${data.error}`);
        }
    } catch (error) {
        console.error(error);
        alert('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async function login() {
    const login = document.getElementById('loginInput')?.value;
    const password = document.getElementById('passwordInput')?.value;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
    if (!login || !password) {
        alert('‚ùå –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
        return;
    }

    try {
        const response = await fetch(`${API_URL}/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username: login, password })
        });

        const data = await response.json();

        if (data.success) {
            currentUserId = data.userId;
            localStorage.setItem('userId', currentUserId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ localStorage
            createUI(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
            fetchUserData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            alert(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç! –í–∞—à ID: ${currentUserId}`); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${data.error}`);
        }
    } catch (error) {
        console.error(error);
        alert('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}
