const API_URL = "https://mkntw-github-io.onrender.com";
let currentUserId = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const loginBtn = document.getElementById('loginBtn');
const registerBtn = document.getElementById('registerBtn');
const logoutBtn = document.getElementById('logoutBtn');
const userInfo = document.getElementById('userInfo');
const userIdSpan = document.getElementById('userId');
const balanceSpan = document.getElementById('balance');
const transferBtn = document.getElementById('transferBtn');

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
const registerModal = document.getElementById('registerModal');
const loginModal = document.getElementById('loginModal');
const transferModal = document.getElementById('transferModal');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    const savedUserId = localStorage.getItem('userId');
    if (savedUserId) {
        currentUserId = savedUserId;
        updateUI();
        fetchUserData();
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    if (currentUserId) {
        loginBtn.classList.add('hidden');
        registerBtn.classList.add('hidden');
        logoutBtn.classList.remove('hidden');
        userInfo.classList.remove('hidden');
        transferBtn.classList.remove('hidden');
    } else {
        loginBtn.classList.remove('hidden');
        registerBtn.classList.remove('hidden');
        logoutBtn.classList.add('hidden');
        userInfo.classList.add('hidden');
        transferBtn.classList.add('hidden');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
loginBtn.addEventListener('click', () => loginModal.classList.remove('hidden'));
registerBtn.addEventListener('click', () => registerModal.classList.remove('hidden'));
logoutBtn.addEventListener('click', logout);
transferBtn.addEventListener('click', () => transferModal.classList.remove('hidden'));

function closeModals() {
    registerModal.classList.add('hidden');
    loginModal.classList.add('hidden');
    transferModal.classList.add('hidden');
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async function register() {
    const login = document.getElementById('regLogin').value;
    const password = document.getElementById('regPassword').value;

    try {
        const response = await fetch(`${API_URL}/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username: login, password })
        });

        const data = await response.json();
        
        if (data.success) {
            alert(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –í–∞—à ID: ${data.userId}`);
            closeModals();
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }
    } catch (error) {
        alert('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async function login() {
    const login = document.getElementById('loginInput').value;
    const password = document.getElementById('passwordInput').value;

    try {
        const response = await fetch(`${API_URL}/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username: login, password })
        });

        const data = await response.json();
        
        if (data.success) {
            currentUserId = data.userId;
            localStorage.setItem('userId', currentUserId);
            updateUI();
            closeModals();
            fetchUserData();
        } else {
            alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        }
    } catch (error) {
        alert('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –í—ã—Ö–æ–¥
function logout() {
    localStorage.removeItem('userId');
    currentUserId = null;
    updateUI();
    closeModals();
}

// –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç
async function transferCoins() {
    const toUserId = document.getElementById('toUserId').value;
    const amount = parseFloat(document.getElementById('transferAmount').value);

    if (!toUserId || !amount || amount <= 0) {
        alert('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return;
    }

    try {
        const response = await fetch(`${API_URL}/transfer`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ fromUserId: currentUserId, toUserId, amount })
        });

        const data = await response.json();
        
        if (data.success) {
            alert(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${data.fromBalance}`);
            closeModals();
            fetchUserData();
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${data.error}`);
        }
    } catch (error) {
        alert('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function fetchUserData() {
    try {
        const response = await fetch(`${API_URL}/user?userId=${currentUserId}`);
        const data = await response.json();

        if (data.success && data.user) {
            const balance = data.user.balance || 0; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ balance —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            if (typeof balance === 'number') {
                userIdSpan.textContent = currentUserId;
                balanceSpan.textContent = balance.toFixed(5); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ 5 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            } else {
                console.error('[Fetch User Data] Error: Balance is not a number');
                balanceSpan.textContent = '0.00000'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
        } else {
            console.error('[Fetch User Data] Error: Invalid response from server');
            balanceSpan.textContent = '0.00000'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    } catch (error) {
        console.error('[Fetch User Data] Error:', error);
        balanceSpan.textContent = '0.00000'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}

// –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ MINE
document.getElementById('tapArea').addEventListener('click', async () => {
    if (!currentUserId) return;

    try {
        await fetch(`${API_URL}/update`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: currentUserId, amount: 0.00001 })
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fetchUserData();
    } catch (error) {
        console.error(error);
    }
});
